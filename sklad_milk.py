# -*- coding: utf-8 -*-
# üè® Golan Hotel ‚Äî –ú–û–õ–û–ß–ù–´–ô –°–ö–õ–ê–î (–æ—Ñ–ª–∞–π–Ω-–≤–µ—Ä—Å–∏—è –±–µ–∑ Google API)
# –í–≤–æ–¥ —Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫–∞–º–∏ ¬±0.5, –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ, –æ—Ç–º–µ–Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–ø–∏—Å–∏,
# —Å–≤–æ–¥–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã + –∫–Ω–æ–ø–∫–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è TXT/CSV. –ó–∞–≥–ª—É—à–∫–∏ upload_to_drive/save_to_sheet.

import os
from datetime import datetime
from zoneinfo import ZoneInfo
from collections import defaultdict

import streamlit as st
import pandas as pd

# ====== –ë–ê–ó–û–í–´–ï –ù–ê–°–¢–†–û–ô–ö–ò ======
TZ = ZoneInfo("Asia/Jerusalem")
PAGE_TITLE = "ü•õ –ú–æ–ª–æ—á–Ω—ã–π —Å–∫–ª–∞–¥ ‚Äî Golan Hotel"
st.set_page_config(page_title=PAGE_TITLE, layout="wide")

# ====== –ó–ê–ì–õ–£–®–ö–ò –î–õ–Ø –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò ======
def upload_to_drive(*args, **kwargs):
    # no-op: —É–±—Ä–∞–ª–∏ Drive
    return None

def save_to_sheet(*args, **kwargs):
    # no-op: —É–±—Ä–∞–ª–∏ Sheets
    return None

# ====== –°–¢–ò–õ–¨ (–º–æ–±–∏–ª–∞/–∫—Ä—É–ø–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã/–Ω—è—à–Ω—ã–π –≤–∞–π–±) ======
st.markdown("""
<style>
html, body, [class*="css"]  { font-size: 18px !important; }
.block-container { padding-top: 1.2rem; padding-bottom: 3rem; }
button, .stButton>button {
  font-size: 18px !important; padding: .55rem .9rem !important;
  border-radius: 14px !important;
}
.g-badge {
  display:inline-block; padding:.2rem .6rem; border-radius:12px;
  background:#f1f5f9; color:#0f172a; font-weight:600; margin-left:.4rem;
}
.g-chip {
  padding:.25rem .6rem; border-radius:999px; background:#eef2ff; color:#4338ca;
  font-size: 0.9rem; font-weight: 700; margin-left:.5rem;
}
.g-card {
  border:1px solid #e2e8f0; border-radius:16px; padding:12px 14px; margin-bottom:10px;
  background: #fff;
  box-shadow: 0 0 0 1px rgba(2,6,23,0.02), 0 8px 24px rgba(2,6,23,0.05);
}
.qty {
  font-size: 22px; font-weight: 800; padding: .1rem .6rem; border-radius: 12px;
  background: #ecfeff; color:#0e7490; display:inline-block; min-width:72px; text-align:center;
}
.kitty { font-family: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono", monospace; }
</style>
""", unsafe_allow_html=True)

# ====== ASCII-–∫–æ—à–∫–∏ ======
st.markdown(
f"""
# {PAGE_TITLE}  
<span class="kitty">
/\\_/\\  ‚òÜ  –ø—Ä–∏–≤–µ—Ç!<br>
( o.o )  —Å—á–∏—Ç–∞–µ–º —Å—ã—Ä–∫–∏, –π–æ–≥—É—Ä—Ç—ã –∏ –º–æ–ª–æ—á–∫–æ –ø–æ 0.5<br>
> ^ <
</span>
""",
unsafe_allow_html=True
)
st.caption("–ö–ª–∏–∫–∞–π —Ç–æ–ª—å–∫–æ ¬´‚ûï/‚ûñ 0.5¬ª. –ß—Ç–æ–±—ã –∑–∞–ø–∏—Å–∞—Ç—å ‚Äî –∂–º–∏ ¬´üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–∫—Ç¬ª –∏–ª–∏ ¬´‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑¬ª. –û—Ç–º–µ–Ω–∏—Ç—å –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ **–ø–æ—Å–ª–µ–¥–Ω—é—é** –∑–∞–ø–∏—Å—å –ø–æ —Ç–æ–≤–∞—Ä—É –¥–æ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü.")

# ====== –°–ü–ò–°–û–ö –ü–†–û–î–£–ö–¢–û–í (–∏–≤—Ä–∏—Ç, —Å—Ç—Ä–æ–≥–æ –∑–∞–¥–∞–Ω–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫) ======
PRODUCTS = [
    "◊í◊ë◊ô◊†◊î ◊í◊ê◊ï◊ì◊î",
    "◊í◊ë◊ô◊†◊î ◊¶◊î◊ï◊ë◊î",
    "◊í◊ë◊ô◊†◊î ◊û◊ï◊¶◊®◊ú◊î",
    "◊í◊ë◊ô◊†◊î ◊û◊ï◊¶◊®◊ú◊î ◊ê◊®◊ï◊ö",
    "◊§◊®◊ï◊û◊¢◊ñ",
    "◊í◊ë◊ô◊†◊™ ◊©◊û◊†◊™",
    "◊í◊ë◊ô◊†◊™ ◊©◊ï◊ù",
    "◊í◊ë◊ô◊†◊™ ◊ñ◊ô◊™◊ô◊ù",
    "◊í◊ë◊ô◊†◊î ◊ú◊ë◊†◊î",
    "◊ß◊ï◊ò◊í◊≥",
    "◊®◊ï◊ß◊§◊ï◊®",
    "◊ß◊û◊û◊ë◊®",
    "◊ë◊®◊ô",
    "◊û◊ï◊¶◊®◊ú◊î ◊ò◊ó◊ï◊ü",
    "◊û◊¢◊ì◊†◊ô◊ù ◊™◊ï◊™",
    "◊û◊¢◊ì◊†◊ô◊ù ◊ê÷≤◊§÷∑◊®◊°÷µ◊ß",
    "◊û◊¢◊ì◊†◊ô◊ù ◊ô◊ï◊í◊ï◊®◊ò",
    "◊û◊¢◊ì◊†◊ô◊ù ◊§◊ï◊ì◊ô◊†◊í",
    "◊ë◊ï◊ú◊í◊®◊ô◊™  5%",
    "◊ë◊ï◊ú◊í◊®◊ô◊™  24%",
    "◊û◊ï◊¶◊®◊ú◊î ◊ë◊ô◊ô◊ë◊ô",
    "◊õ◊ì◊ï◊®◊ô◊ù ◊û◊ï◊¶◊®◊ú◊î",
    "◊¶◊§◊™◊ô◊™",
    "◊ô◊ï◊í◊ï◊®◊ò",
    "◊†◊¢◊û◊î",
    "◊í◊ë◊ô◊†◊î ◊û◊í◊ï◊®◊ì◊™",
    "◊í◊ë◊ô◊†◊î ◊û◊ï◊¶◊®◊ú◊î ◊û◊í◊ï◊®◊ì◊™",
    "◊©◊û◊†◊™",
    "◊ó◊û◊û◊î",
    "◊©◊û◊†◊™ ◊û◊§◊ï◊°◊ò◊®◊™",
    "◊ó◊ú◊ë",
    "◊ë◊ô◊¶◊ô◊ù ◊ß◊®◊ò◊ï◊ü",
    "◊®◊ë◊ô◊ï◊ú◊ô ◊í◊ë◊ô◊†◊î",
    "◊®◊ë◊ô◊ï◊ú◊ô ◊ë◊ò◊ò◊î",
    "◊û◊ï◊¶◊®◊ú◊î ◊û◊ò◊ï◊í◊†◊™",
    "◊ë◊ú◊ô◊†◊¶◊≥◊° ◊†◊ï◊í◊î",
    "◊ë◊ú◊ô◊†◊¶◊≥◊° ◊©◊ï◊ß◊ï◊ú◊ì",
    "◊ë◊ú◊ô◊†◊¶◊≥◊° ◊™◊§◊ï◊ó",
]

# –≠–º–æ–¥–∑–∏ –ø–æ–¥ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ
EMOJI = {
    "◊ó◊ú◊ë": "ü•õ", "◊ô◊ï◊í◊ï◊®◊ò": "ü•õ", "◊ß◊ï◊ò◊í◊≥": "ü•£", "◊í◊ë◊ô◊†◊î": "üßÄ", "◊ë◊ô◊¶◊ô◊ù": "ü•ö",
    "◊®◊ë◊ô◊ï◊ú◊ô": "ü•ü", "◊ë◊ú◊ô◊†◊¶◊≥◊°": "ü•û", "◊û◊¢◊ì◊†◊ô◊ù": "üçÆ", "◊ê÷≤◊§÷∑◊®◊°÷µ◊ß": "üçë", "◊™◊ï◊™": "üçì",
}
def emoji_for(name: str) -> str:
    for k, v in EMOJI.items():
        if k in name:
            return v
    return "üßÄ"

# ====== SESSION STATE ======
def _init_state():
    if "temp_facts" not in st.session_state:   # –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏ —Ñ–∞–∫—Ç–æ–≤
        st.session_state.temp_facts = []       # dict(timestamp, product, size, qty)
    if "temp_orders" not in st.session_state:  # –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –∑–∞–∫–∞–∑–æ–≤
        st.session_state.temp_orders = []
    if "counters" not in st.session_state:     # {'product_key': {'fact':0.0,'order':0.0,'size':'big'}}
        st.session_state.counters = {}
    if "finalized_facts" not in st.session_state:
        st.session_state.finalized_facts = False
    if "finalized_orders" not in st.session_state:
        st.session_state.finalized_orders = False

_init_state()

def pkey(name: str) -> str:
    return name.replace(" ", "_").replace("'", "_").replace("◊¥", "_")

def now():
    dt = datetime.now(TZ)
    return dt, dt.strftime("%Y-%m-%d %H:%M")

def add05(x: float) -> float:
    return round((x + 0.5) * 2) / 2.0

def sub05(x: float) -> float:
    y = round((x - 0.5) * 2) / 2.0
    return max(0.0, y)

# ====== –°–∞–π–¥–±–∞—Ä ======
with st.sidebar:
    st.header("‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ")
    if st.button("üßΩ –ù–æ–≤–∞—è —Å–µ—Å—Å–∏—è (–æ—á–∏—Å—Ç–∏—Ç—å –≤—Å—ë)", type="primary"):
        for k in ("temp_facts", "temp_orders", "counters", "finalized_facts", "finalized_orders"):
            if k in st.session_state:
                del st.session_state[k]
        _init_state()
        st.experimental_rerun()

    show_debug = st.checkbox("–ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç–ª–∞–¥–∫—É", value=False)

# ====== –ö–û–ú–ü–û–ù–ï–ù–¢ –¢–û–í–ê–†–ê ======
def product_block(name: str):
    key = pkey(name)
    if key not in st.session_state.counters:
        st.session_state.counters[key] = {"fact": 0.0, "order": 0.0, "size": "big"}

    em = emoji_for(name)
    st.markdown(f'<div class="g-card"><h3>{em} {name}<span class="g-badge">milk</span></h3>', unsafe_allow_html=True)

    # –†–∞–∑–º–µ—Ä (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é ‚Äî big)
    opt = st.segmented_control(
        "–†–∞–∑–º–µ—Ä –µ–¥–∏–Ω–∏—Ü—ã",
        options=["–ë–æ–ª—å—à–æ–π", "–ú–∞–ª–µ–Ω—å–∫–∏–π"],
        default="–ë–æ–ª—å—à–æ–π",
        key=f"{key}_size_seg",
    )
    size = "big" if opt == "–ë–æ–ª—å—à–æ–π" else "small"
    st.session_state.counters[key]["size"] = size

    c1, c2 = st.columns(2)

    # ===== –§–ê–ö–¢ =====
    with c1:
        st.markdown("**–§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –æ—Å—Ç–∞—Ç–æ–∫**  <span class='g-chip'>¬±0.5</span>", unsafe_allow_html=True)
        bb1, bb2, bb3, bb4 = st.columns([1,1,2,2])
        if bb1.button("‚ûñ 0.5", key=f"{key}_fact_minus", disabled=st.session_state.finalized_facts):
            st.session_state.counters[key]["fact"] = sub05(st.session_state.counters[key]["fact"])
        if bb2.button("‚ûï 0.5", key=f"{key}_fact_plus", disabled=st.session_state.finalized_facts):
            st.session_state.counters[key]["fact"] = add05(st.session_state.counters[key]["fact"])
        bb3.markdown(f"<div class='qty'>{st.session_state.counters[key]['fact']:.1f}</div>", unsafe_allow_html=True)
        if bb4.button("üîÑ –°–±—Ä–æ—Å", key=f"{key}_fact_reset", disabled=st.session_state.finalized_facts):
            st.session_state.counters[key]["fact"] = 0.0

        a1, a2 = st.columns([2,2])
        if a1.button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–∫—Ç", key=f"{key}_fact_save", disabled=st.session_state.finalized_facts):
            qty = float(st.session_state.counters[key]["fact"])
            if qty <= 0:
                st.warning("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (—Ö–æ—Ç—è –±—ã 0.5) –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º.")
            else:
                _, ts_str = now()
                st.session_state.temp_facts.append({
                    "timestamp": ts_str,
                    "product": name,
                    "size": size,
                    "qty": qty,
                })
                st.success(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {qty:.1f} —à—Ç. ‚Äî {name} ({size})")
                st.session_state.counters[key]["fact"] = 0.0

        if a2.button("‚Ü©Ô∏è –û—Ç–º–µ–Ω–∏—Ç—å —Ñ–∞–∫—Ç", key=f"{key}_fact_undo", disabled=st.session_state.finalized_facts):
            for i in range(len(st.session_state.temp_facts)-1, -1, -1):
                if st.session_state.temp_facts[i]["product"] == name:
                    removed = st.session_state.temp_facts.pop(i)
                    st.warning(f"–£–¥–∞–ª–µ–Ω–æ: {removed['qty']:.1f} —à—Ç. ‚Äî {name} ({removed['size']})")
                    break
            else:
                st.info("–î–ª—è —ç—Ç–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –Ω–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π.")

    # ===== –ó–ê–ö–ê–ó =====
    with c2:
        st.markdown("**–¢—Ä–µ–±—É–µ—Ç—Å—è –∑–∞–∫—É–ø–∏—Ç—å**  <span class='g-chip'>¬±0.5</span>", unsafe_allow_html=True)
        cc1, cc2, cc3, cc4 = st.columns([1,1,2,2])
        if cc1.button("‚ûñ 0.5", key=f"{key}_order_minus", disabled=st.session_state.finalized_orders):
            st.session_state.counters[key]["order"] = sub05(st.session_state.counters[key]["order"])
        if cc2.button("‚ûï 0.5", key=f"{key}_order_plus", disabled=st.session_state.finalized_orders):
            st.session_state.counters[key]["order"] = add05(st.session_state.counters[key]["order"])
        cc3.markdown(f"<div class='qty'>{st.session_state.counters[key]['order']:.1f}</div>", unsafe_allow_html=True)
        if cc4.button("üîÑ –°–±—Ä–æ—Å", key=f"{key}_order_reset", disabled=st.session_state.finalized_orders):
            st.session_state.counters[key]["order"] = 0.0

        b1, b2 = st.columns([2,2])
        if b1.button("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑", key=f"{key}_order_save", disabled=st.session_state.finalized_orders):
            qty = float(st.session_state.counters[key]["order"])
            if qty <= 0:
                st.warning("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (—Ö–æ—Ç—è –±—ã 0.5) –ø–µ—Ä–µ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º –∑–∞–∫–∞–∑–∞.")
            else:
                _, ts_str = now()
                st.session_state.temp_orders.append({
                    "timestamp": ts_str,
                    "product": name,
                    "size": size,
                    "qty": qty,
                })
                st.success(f"–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∑–∞–∫–∞–∑: {qty:.1f} —à—Ç. ‚Äî {name} ({size})")
                st.session_state.counters[key]["order"] = 0.0

        if b2.button("‚Ü©Ô∏è –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑", key=f"{key}_order_undo", disabled=st.session_state.finalized_orders):
            for i in range(len(st.session_state.temp_orders)-1, -1, -1):
                if st.session_state.temp_orders[i]["product"] == name:
                    removed = st.session_state.temp_orders.pop(i)
                    st.warning(f"–£–¥–∞–ª–µ–Ω–æ –∏–∑ –∑–∞–∫–∞–∑–∞: {removed['qty']:.1f} —à—Ç. ‚Äî {name} ({removed['size']})")
                    break
            else:
                st.info("–î–ª—è —ç—Ç–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –Ω–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –ø–æ –∑–∞–∫–∞–∑—É.")

    st.markdown("</div>", unsafe_allow_html=True)  # g-card end

# ====== –†–ï–ù–î–ï–† –í–°–ï–ì–û –°–ü–ò–°–ö–ê ======
for prod in PRODUCTS:
    product_block(prod)

st.divider()

# ====== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï ======
def aggregate_rows(rows: list[dict]) -> pd.DataFrame:
    """–ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –ø—Ä–æ–¥—É–∫—Ç—É+—Ä–∞–∑–º–µ—Ä—É —Å —Å—É–º–º–æ–π qty."""
    if not rows:
        return pd.DataFrame(columns=["–ü—Ä–æ–¥—É–∫—Ç", "–†–∞–∑–º–µ—Ä", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"])
    df = pd.DataFrame(rows)
    g = df.groupby(["product", "size"], as_index=False)["qty"].sum()
    g = g.rename(columns={"product": "–ü—Ä–æ–¥—É–∫—Ç", "size": "–†–∞–∑–º–µ—Ä", "qty": "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"})
    g["–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"] = g["–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"].map(lambda x: f"{x:.1f}")
    return g

def df_to_txt_lines(df: pd.DataFrame, title: str) -> str:
    now_str = datetime.now(TZ).strftime("%Y-%m-%d %H:%M")
    lines = [f"{title} ‚Äî {now_str}", "-"*28]
    for _, r in df.iterrows():
        lines.append(f"{r['–ü—Ä–æ–¥—É–∫—Ç']} ({r['–†–∞–∑–º–µ—Ä']}): {r['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ']} —à—Ç.")
    return "\n".join(lines) + "\n"

def make_downloads(df: pd.DataFrame, base_name: str, title: str):
    ts = datetime.now(TZ).strftime("%Y%m%d_%H%M%S")
    csv_bytes = df.to_csv(index=False).encode("utf-8-sig")
    txt_bytes = df_to_txt_lines(df, title).encode("utf-8")

    c1, c2 = st.columns(2)
    with c1:
        st.download_button(
            "‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å CSV",
            data=csv_bytes,
            file_name=f"{base_name}_{ts}.csv",
            mime="text/csv",
            use_container_width=True
        )
    with c2:
        st.download_button(
            "‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å TXT",
            data=txt_bytes,
            file_name=f"{base_name}_{ts}.txt",
            mime="text/plain",
            use_container_width=True
        )

# ====== –°–í–û–î–ù–´–ï –ö–ù–û–ü–ö–ò/–¢–ê–ë–õ–ò–¶–´ ======
st.subheader("üßæ –°–≤–æ–¥–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã")

colA, colB = st.columns(2)

with colA:
    st.markdown("### üì¶ –ò–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏—è")
    if st.session_state.temp_facts:
        st.dataframe(pd.DataFrame(st.session_state.temp_facts), use_container_width=True, height=220)
        if st.button("üì¶ –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏—é", type="primary", disabled=st.session_state.finalized_facts):
            st.session_state.finalized_facts = True
    else:
        st.info("–ü–æ–∫–∞ –Ω–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –ø–æ –æ—Å—Ç–∞—Ç–∫–∞–º.")

    if st.session_state.finalized_facts:
        agg_f = aggregate_rows(st.session_state.temp_facts)
        st.success("–ì–æ—Ç–æ–≤–æ! –ù–∏–∂–µ ‚Äî —Å–≤–æ–¥–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏–∏.")
        st.dataframe(agg_f, use_container_width=True, height=280)
        make_downloads(agg_f, base_name="stock", title="–ò–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏—è")

with colB:
    st.markdown("### üßæ –ó–∞–∫–∞–∑ –Ω–∞ –∑–∞–∫—É–ø")
    if st.session_state.temp_orders:
        st.dataframe(pd.DataFrame(st.session_state.temp_orders), use_container_width=True, height=220)
        if st.button("üßæ –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –∑–∞–∫–∞–∑", type="primary", disabled=st.session_state.finalized_orders):
            st.session_state.finalized_orders = True
    else:
        st.info("–ü–æ–∫–∞ –Ω–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –ø–æ –∑–∞–∫–∞–∑—É.")

    if st.session_state.finalized_orders:
        agg_o = aggregate_rows(st.session_state.temp_orders)
        st.success("–ì–æ—Ç–æ–≤–æ! –ù–∏–∂–µ ‚Äî —Å–≤–æ–¥–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –∑–∞–∫–∞–∑–∞.")
        st.dataframe(agg_o, use_container_width=True, height=280)
        make_downloads(agg_o, base_name="order", title="–ó–∞–∫–∞–∑")

# ====== –û–¢–õ–ê–î–ö–ê ======
if show_debug:
    st.divider()
    st.subheader("ü™≤ DEBUG")
    st.write("finalized_facts:", st.session_state.finalized_facts,
             "finalized_orders:", st.session_state.finalized_orders)
    st.write("temp_facts:", st.session_state.temp_facts)
    st.write("temp_orders:", st.session_state.temp_orders)
    st.write("counters (live):", st.session_state.counters)

# –§–∏–Ω–∞–ª—å–Ω—ã–π –∫–æ—Ç–∏–∫
st.markdown("""
<hr>
<div class="kitty">
/\\_/\\  <br>
( ‚Ä¢_‚Ä¢)  —Å–ø–∞—Å–∏–±–æ!<br>
/>üç∂   –≤–æ–∑–≤—Ä–∞—â–∞–π—Å—è –∑–∞ —Å—ã—Ä–æ—á–∫–æ–º
</div>
""", unsafe_allow_html=True)
